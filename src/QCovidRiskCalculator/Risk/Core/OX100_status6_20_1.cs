// QCovid® Calculation Engine is Copyright © 2020 Oxford University Innovation Limited.
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
// 
// PLEASE NOTE:
// In its compiled form, QCovid@ Calculation Engine is a Class I Medical Device and
// is covered by the Medical Device Regulations 2002 (as amended).
// 
// Modification of the source code and subsequently placing that modified code on the market
// may make that person/entity a legal manufacturer of a medical device and so
// subject to the requirements listed in Medical Device Regulations 2002 (as amended).
// 
// Failure to comply with these regulations (for example, failure to comply with the relevant
// registration requirements or failure to meet the relevant essential requirements)
// may result in prosecution and a penalty of an unlimited fine and/or 6 months’ imprisonment.
// 
// This source code version of QCovid® Calculation Engine is provided as is, and
// has not been certified for clinical use, and must not be used for supporting or informing clinical decision-making.

/* 
 * This file has been auto-generated using ClinRisk Ltd's tools.
 * XML source: OX100_status6_20_1.xml
 * STATA dta time stamp: 4 Jul 2020 14:00
 * .NET file create date: Tue  4 Aug 2020 14:05:17 BST
 */

using System;
using System.IO;
using System.Collections;

using CRStandardDefinitions;

namespace ClinRiskAutogenerated
{
    internal class OX100_status6_20_1
    {
        public class Result
        {
            public string status;
            public Double? score;

            public Result()
            {
                status = "undefined";
                score = null;
            }
        }

        // helper methods for the validation method
        private bool is_boolean(int b)
        {
            bool result = false;
            if (b == 1 || b == 0)
            {
                result = true;
            }
            return result;
        }

        private bool d_in_range(double x, double min, double max)
        {
            return !(x < min || x > max);
        }

        private bool i_in_range(int x, int min, int max)
        {
            return !(x < min || x > max);
        }

        public bool ok = true;
        public ArrayList errorList = new ArrayList();
        public bool estimate = false;
        public ArrayList estimateList = new ArrayList();

        private bool validateIntsAndDoubles(ref int age, bool b2_82, bool b2_leukolaba, bool b2_prednisolone, bool b_AF, bool b_CCF, bool b_asthma, bool b_bloodcancer, bool b_cerebralpalsy, bool b_chd, bool b_cirrhosis, bool b_congenheart, bool b_copd, bool b_dementia, bool b_epilepsy, bool b_fracture4, bool b_neurorare, bool b_parkinsons, bool b_pulmhyper, bool b_pulmrare, bool b_pvd, bool b_ra_sle, bool b_respcancer, bool b_semi, bool b_sicklecelldisease, bool b_stroke, DiabetesCat diabetes_cat, bool b_vte, ref double bmi, Chemocat chemocat, Ethnicity ethnicity, Homecat homecat, Learncat learncat, bool p_marrow6, bool p_radio6, bool p_solidtransplant, Renalcat renalcat, ref int surv, ref double town)
        {
            ok = true;
            estimate = false;
            errorList.Clear();
            estimateList.Clear();

            if (!i_in_range(age, 19, 100))
            {
                ok = false;
                errorList.Add("age must be in range (19,100)");
            }
            if (!d_in_range(bmi, 15, 47))
            {
                estimate = true;
                if (bmi < 15)
                {
                    bmi = 15;
                }
                if (bmi > 47)
                {
                    bmi = 47;
                }
                estimateList.Add("bmi adjusted to lie in range (15,47)");
            }
            if (!i_in_range(surv, 1, 90))
            {
                ok = false;
                errorList.Add("surv must be in range (1,90)");
            }
            if (!d_in_range(town, -8, 12))
            {
                estimate = true;
                if (town < -8)
                {
                    town = -8;
                }
                if (town > 12)
                {
                    town = 12;
                }
                estimateList.Add("town adjusted to lie in range (-8,12)");
            }
            /*  return validity */
            return ok;
        }

        /* status6 */

        static private double status6_male_raw(
            int age, int b2_82, int b2_leukolaba, int b2_prednisolone, int b_AF, int b_CCF, int b_asthma, int b_bloodcancer, int b_cerebralpalsy, int b_chd, int b_cirrhosis, int b_congenheart, int b_copd, int b_dementia, int b_epilepsy, int b_fracture4, int b_neurorare, int b_parkinsons, int b_pulmhyper, int b_pulmrare, int b_pvd, int b_ra_sle, int b_respcancer, int b_semi, int b_sicklecelldisease, int b_stroke, int b_type1, int b_type2, int b_vte, double bmi, int chemocat, int ethrisk, int homecat, int learncat, int p_marrow6, int p_radio6, int p_solidtransplant, int renalcat, int surv, double town
        )
        {
            double[] survivor = {
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.999852597713470,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.999484241008759
            };

            /* The conditional arrays */

            double[] Ichemocat = {
                0,
                0.5396791056031334798959165,
                1.2925251045919026182673406,
                1.4127304180622570761727275
            };
            double[] Iethrisk = {
                0,
                0,
                0.7634218127621078542333066,
                0.7004223248170889926100813,
                0.5371036969721910692143751,
                0.8272743507914643856793191,
                0.8264788057106159380182930,
                0.9530259006923202935723793,
                0.4095851796464533567387889,
                0.7509020278385331037540595
            };
            double[] Ihomecat = {
                0,
                0.9242505123586811643932037,
                0.4041900688356840354309440
            };
            double[] Ilearncat = {
                0,
                0.3227329968905671697676496,
                1.4717734162553066656897727
            };
            double[] Irenalcat = {
                0,
                0,
                0.2486111847569784372158352,
                0.6922251739537846892957873,
                1.3499829137108374510489739,
                1.7747394666416362873917478,
                1.9583171284266656098083104
            };

            /* Applying the fractional polynomial transforms */
            /* (which includes scaling)                      */

            double dage = age;
            dage = dage / 10;
            double age_1 = Math.Pow(dage, -2);
            double age_2 = Math.Pow(dage, 2);
            double dbmi = bmi;
            dbmi = dbmi / 10;
            double bmi_1 = Math.Pow(dbmi, -.5);
            double bmi_2 = Math.Log(dbmi);

            /* The normalisation coefficients */

            double mage_1 = 0.043937455862761;
            double mage_2 = 22.759624481201172;
            double mbmi_1 = 0.613678753376007;
            double mbmi_2 = 0.976567327976227;
            double mtown = 0.436863929033279;

            /* Centring the continuous variables */

            age_1 = age_1 - mage_1;
            age_2 = age_2 - mage_2;
            bmi_1 = bmi_1 - mbmi_1;
            bmi_2 = bmi_2 - mbmi_2;
            town = town - mtown;

            /* Start of Sum */
            double a = 0;

            /* The conditional sums */

            a += Ichemocat[chemocat];
            a += Iethrisk[ethrisk];
            a += Ihomecat[homecat];
            a += Ilearncat[learncat];
            a += Irenalcat[renalcat];

            /* The continuous coefficients */

            double cage_1 = -9.8655000090771149956481167;
            double cage_2 = 0.0372128338797922050829037;
            double cbmi_1 = 21.1033159148484443790039222;
            double cbmi_2 = 7.4762210517919633900874032;
            double ctown = 0.0763068123197961217796248;

            /* Sum from continuous values */

            a += age_1 * cage_1;
            a += age_2 * cage_2;
            a += bmi_1 * cbmi_1;
            a += bmi_2 * cbmi_2;
            a += town * ctown;

            /* The boolean coefficients */

            double cb2_82 = 0.1096448643067308714726948;
            double cb2_leukolaba = 0.1684284444365026223167092;
            double cb2_prednisolone = 0.3541104309369558778008980;
            double cb_AF = 0.1758375829207621254823835;
            double cb_CCF = 0.2837377731487550902578221;
            double cb_asthma = 0.0967382412217892284633791;
            double cb_bloodcancer = 0.2509843520785098314185291;
            double cb_cerebralpalsy = 1.0462838419104085740940491;
            double cb_chd = 0.0610268853855645346251357;
            double cb_cirrhosis = 0.6299545424034566076798569;
            double cb_congenheart = -0.0319579062821411449824005;
            double cb_copd = 0.3083628647668430478034907;
            double cb_dementia = 0.7510502350454668629708976;
            double cb_epilepsy = 0.5603168206085185065745691;
            double cb_fracture4 = 0.3019787013219903393235199;
            double cb_neurorare = 1.2049102841347989478748559;
            double cb_parkinsons = 0.7178953912544794313532748;
            double cb_pulmhyper = 0.4420231036633441856764648;
            double cb_pulmrare = 0.2519365241136610200634038;
            double cb_pvd = 0.2362081915599513470827020;
            double cb_ra_sle = 0.2597912276586239466169559;
            double cb_respcancer = 0.3673198175857035341351775;
            double cb_semi = 0.2479742845321690758453315;
            double cb_sicklecelldisease = 1.5829020197071794751053631;
            double cb_stroke = 0.2673711337366190821107637;
            double cb_type1 = 1.2986534162809348913469876;
            double cb_type2 = 0.9444989479513733465765313;
            double cb_vte = 0.2608403897792810899325389;
            double cp_marrow6 = 0.5296880469252451817396832;
            double cp_radio6 = 0.7018887794605082053323031;
            double cp_solidtransplant = 0.7032493213195643022572767;

            /* Sum from boolean values */

            a += b2_82 * cb2_82;
            a += b2_leukolaba * cb2_leukolaba;
            a += b2_prednisolone * cb2_prednisolone;
            a += b_AF * cb_AF;
            a += b_CCF * cb_CCF;
            a += b_asthma * cb_asthma;
            a += b_bloodcancer * cb_bloodcancer;
            a += b_cerebralpalsy * cb_cerebralpalsy;
            a += b_chd * cb_chd;
            a += b_cirrhosis * cb_cirrhosis;
            a += b_congenheart * cb_congenheart;
            a += b_copd * cb_copd;
            a += b_dementia * cb_dementia;
            a += b_epilepsy * cb_epilepsy;
            a += b_fracture4 * cb_fracture4;
            a += b_neurorare * cb_neurorare;
            a += b_parkinsons * cb_parkinsons;
            a += b_pulmhyper * cb_pulmhyper;
            a += b_pulmrare * cb_pulmrare;
            a += b_pvd * cb_pvd;
            a += b_ra_sle * cb_ra_sle;
            a += b_respcancer * cb_respcancer;
            a += b_semi * cb_semi;
            a += b_sicklecelldisease * cb_sicklecelldisease;
            a += b_stroke * cb_stroke;
            a += b_type1 * cb_type1;
            a += b_type2 * cb_type2;
            a += b_vte * cb_vte;
            a += p_marrow6 * cp_marrow6;
            a += p_radio6 * cp_radio6;
            a += p_solidtransplant * cp_solidtransplant;

            /* The interaction coefficients */

            double cage_1_b_type2 = 8.1824740477927431214766330;
            double cage_2_b_type2 = -0.0088155777714664287220137;

            /* Sum from interaction terms */

            a += age_1 * b_type2 * cage_1_b_type2;
            a += age_2 * b_type2 * cage_2_b_type2;

            /* Calculate the score itself */
            double score = 100.0 * (1 - Math.Pow(survivor[surv], Math.Exp(a)));
            return score;
        }

        public Result status6_male(
            int age, bool b2_82, bool b2_leukolaba, bool b2_prednisolone, bool b_AF, bool b_CCF, bool b_asthma, bool b_bloodcancer, bool b_cerebralpalsy, bool b_chd, bool b_cirrhosis, bool b_congenheart, bool b_copd, bool b_dementia, bool b_epilepsy, bool b_fracture4, bool b_neurorare, bool b_parkinsons, bool b_pulmhyper, bool b_pulmrare, bool b_pvd, bool b_ra_sle, bool b_respcancer, bool b_semi, bool b_sicklecelldisease, bool b_stroke, DiabetesCat diabetes_cat, bool b_vte, double bmi, Chemocat chemocat, Ethnicity ethnicity, Homecat homecat, Learncat learncat, bool p_marrow6, bool p_radio6, bool p_solidtransplant, Renalcat renalcat, int surv, double town
        )
        {
            Result result = new Result();
            bool validInputs = validateIntsAndDoubles(ref age, b2_82, b2_leukolaba, b2_prednisolone, b_AF, b_CCF, b_asthma, b_bloodcancer, b_cerebralpalsy, b_chd, b_cirrhosis, b_congenheart, b_copd, b_dementia, b_epilepsy, b_fracture4, b_neurorare, b_parkinsons, b_pulmhyper, b_pulmrare, b_pvd, b_ra_sle, b_respcancer, b_semi, b_sicklecelldisease, b_stroke, diabetes_cat, b_vte, ref bmi, chemocat, ethnicity, homecat, learncat, p_marrow6, p_radio6, p_solidtransplant, renalcat, ref surv, ref town);
            if (validInputs)
            {
                result.status = "ok";
                if (estimate)
                {
                    result.status = "estimate:";
                    foreach (Object obj in estimateList)
                    {
                        string s = (string)obj;
                        s = s.Replace(",", " to ");
                        result.status += s + ";";
                    }
                }
            }
            else
            {
                result.status = "error:";
                foreach (Object obj in errorList)
                {
                    string s = (string)obj;
                    s = s.Replace(",", " to ");
                    result.status += s + ";";
                }
                result.score = null;
                return result;
            }

            double tmp = status6_male_raw(
                age,    // age must lie in range (19 .. 100)
                Utilities.boolToInt(b2_82),
                Utilities.boolToInt(b2_leukolaba),
                Utilities.boolToInt(b2_prednisolone),
                Utilities.boolToInt(b_AF),
                Utilities.boolToInt(b_CCF),
                Utilities.boolToInt(b_asthma),
                Utilities.boolToInt(b_bloodcancer),
                Utilities.boolToInt(b_cerebralpalsy),
                Utilities.boolToInt(b_chd),
                Utilities.boolToInt(b_cirrhosis),
                Utilities.boolToInt(b_congenheart),
                Utilities.boolToInt(b_copd),
                Utilities.boolToInt(b_dementia),
                Utilities.boolToInt(b_epilepsy),
                Utilities.boolToInt(b_fracture4),
                Utilities.boolToInt(b_neurorare),
                Utilities.boolToInt(b_parkinsons),
                Utilities.boolToInt(b_pulmhyper),
                Utilities.boolToInt(b_pulmrare),
                Utilities.boolToInt(b_pvd),
                Utilities.boolToInt(b_ra_sle),
                Utilities.boolToInt(b_respcancer),
                Utilities.boolToInt(b_semi),
                Utilities.boolToInt(b_sicklecelldisease),
                Utilities.boolToInt(b_stroke),
                Utilities.diabetescatToType1(diabetes_cat),
                Utilities.diabetescatToType2(diabetes_cat),
                Utilities.boolToInt(b_vte),
                bmi,    // bmi must lie in range (15 .. 47)
                Utilities.chemocatToInt(chemocat),
                Utilities.ethnicityToEthrisk(ethnicity),
                Utilities.homecatToInt(homecat),
                Utilities.learncatToInt(learncat),
                Utilities.boolToInt(p_marrow6),
                Utilities.boolToInt(p_radio6),
                Utilities.boolToInt(p_solidtransplant),
                Utilities.renalcatToInt(renalcat),
                surv,   // surv must lie in range (1 .. 90)
                town    // town must lie in range (-8 .. 12)
            );
            tmp = Math.Round(tmp * 1000000.0) / 1000000.0;
            result.score = tmp;

            return result;
        }

        /* End of status6 */

    }
}
