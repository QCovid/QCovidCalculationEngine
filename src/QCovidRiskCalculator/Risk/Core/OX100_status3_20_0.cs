// QCovid® Calculation Engine is Copyright © 2020 Oxford University Innovation Limited.
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
// 
// PLEASE NOTE:
// In its compiled form, QCovid@ Calculation Engine is a Class I Medical Device and
// is covered by the Medical Device Regulations 2002 (as amended).
// 
// Modification of the source code and subsequently placing that modified code on the market
// may make that person/entity a legal manufacturer of a medical device and so
// subject to the requirements listed in Medical Device Regulations 2002 (as amended).
// 
// Failure to comply with these regulations (for example, failure to comply with the relevant
// registration requirements or failure to meet the relevant essential requirements)
// may result in prosecution and a penalty of an unlimited fine and/or 6 months’ imprisonment.
// 
// This source code version of QCovid® Calculation Engine is provided as is, and
// has not been certified for clinical use, and must not be used for supporting or informing clinical decision-making.

/* 
 * This file has been auto-generated using ClinRisk Ltd's tools.
 * XML source: OX100_status3_20_0.xml
 * STATA dta time stamp: 4 Jul 2020 14:00
 * .NET file create date: Tue  4 Aug 2020 13:15:46 BST
 */

using System;
using System.IO;
using System.Collections;

using CRStandardDefinitions;

namespace ClinRiskAutogenerated
{
    internal class OX100_status3_20_0
    {
        public class Result
        {
            public string status;
            public Double? score;

            public Result()
            {
                status = "undefined";
                score = null;
            }
        }

        // helper methods for the validation method
        private bool is_boolean(int b)
        {
            bool result = false;
            if (b == 1 || b == 0)
            {
                result = true;
            }
            return result;
        }

        private bool d_in_range(double x, double min, double max)
        {
            return !(x < min || x > max);
        }

        private bool i_in_range(int x, int min, int max)
        {
            return !(x < min || x > max);
        }

        public bool ok = true;
        public ArrayList errorList = new ArrayList();
        public bool estimate = false;
        public ArrayList estimateList = new ArrayList();

        private bool validateIntsAndDoubles(ref int age, bool b2_82, bool b2_leukolaba, bool b2_prednisolone, bool b_AF, bool b_CCF, bool b_asthma, bool b_bloodcancer, bool b_cerebralpalsy, bool b_chd, bool b_cirrhosis, bool b_congenheart, bool b_copd, bool b_dementia, bool b_epilepsy, bool b_fracture4, bool b_neurorare, bool b_parkinsons, bool b_pulmhyper, bool b_pulmrare, bool b_pvd, bool b_ra_sle, bool b_respcancer, bool b_semi, bool b_sicklecelldisease, bool b_stroke, DiabetesCat diabetes_cat, bool b_vte, ref double bmi, Chemocat chemocat, Ethnicity ethnicity, Homecat homecat, Learncat learncat, bool p_marrow6, bool p_radio6, bool p_solidtransplant, Renalcat renalcat, ref int surv, ref double town)
        {
            ok = true;
            estimate = false;
            errorList.Clear();
            estimateList.Clear();

            if (!i_in_range(age, 19, 100))
            {
                ok = false;
                errorList.Add("age must be in range (19,100)");
            }
            if (!d_in_range(bmi, 15, 47))
            {
                estimate = true;
                if (bmi < 15)
                {
                    bmi = 15;
                }
                if (bmi > 47)
                {
                    bmi = 47;
                }
                estimateList.Add("bmi adjusted to lie in range (15,47)");
            }
            if (!i_in_range(surv, 1, 90))
            {
                ok = false;
                errorList.Add("surv must be in range (1,90)");
            }
            if (!d_in_range(town, -8, 12))
            {
                estimate = true;
                if (town < -8)
                {
                    town = -8;
                }
                if (town > 12)
                {
                    town = 12;
                }
                estimateList.Add("town adjusted to lie in range (-8,12)");
            }
            /*  return validity */
            return ok;
        }

        /* status3 */

        static private double status3_female_raw(
            int age, int b2_82, int b2_leukolaba, int b2_prednisolone, int b_AF, int b_CCF, int b_asthma, int b_bloodcancer, int b_cerebralpalsy, int b_chd, int b_cirrhosis, int b_congenheart, int b_copd, int b_dementia, int b_epilepsy, int b_fracture4, int b_neurorare, int b_parkinsons, int b_pulmhyper, int b_pulmrare, int b_pvd, int b_ra_sle, int b_respcancer, int b_semi, int b_sicklecelldisease, int b_stroke, int b_type1, int b_type2, int b_vte, double bmi, int chemocat, int ethrisk, int homecat, int learncat, int p_marrow6, int p_radio6, int p_solidtransplant, int renalcat, int surv, double town
        )
        {
            double[] survivor = {
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.999998927116394,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.999977290630341
            };

            /* The conditional arrays */

            double[] Ichemocat = {
                0,
                0.8345234517964427167768804,
                1.2595202625466794810193960,
                2.8514552483447963560081462
            };
            double[] Iethrisk = {
                0,
                0,
                0.6389369130057840351355480,
                0.3342933389380337572127644,
                0.3428258158976604796919219,
                0.1716307703741346002423995,
                0.5199930351630326352818656,
                0.6823609168626041387994974,
                0.1930811621976745162676536,
                0.5483388756920363205082936
            };
            double[] Ihomecat = {
                0,
                1.2843897452012438265001038,
                0.3902468934897107555315188
            };
            double[] Ilearncat = {
                0,
                0.3039596464330543423848496,
                3.4826484000729771572935078
            };
            double[] Irenalcat = {
                0,
                0,
                0.2651025698152708609534045,
                0.3172050204046410470937190,
                1.0983587266864589526704776,
                0.9870752383405548835426657,
                2.0594912500810331756895266
            };

            /* Applying the fractional polynomial transforms */
            /* (which includes scaling)                      */

            double dage = age;
            dage = dage / 10;
            double age_2 = Math.Pow(dage, 3) * Math.Log(dage);
            double age_1 = Math.Pow(dage, 3);
            double dbmi = bmi;
            dbmi = dbmi / 10;
            double bmi_1 = Math.Pow(dbmi, .5);
            double bmi_2 = Math.Pow(dbmi, .5) * Math.Log(dbmi);

            /* The normalisation coefficients */

            double mage_1 = 115.599884033203125;
            double mage_2 = 183.038345336914062;
            double mbmi_1 = 1.632479429244995;
            double mbmi_2 = 1.600156426429749;
            double mtown = 0.327639788389206;

            /* Centring the continuous variables */

            age_1 = age_1 - mage_1;
            age_2 = age_2 - mage_2;
            bmi_1 = bmi_1 - mbmi_1;
            bmi_2 = bmi_2 - mbmi_2;
            town = town - mtown;

            /* Start of Sum */
            double a = 0;

            /* The conditional sums */

            a += Ichemocat[chemocat];
            a += Iethrisk[ethrisk];
            a += Ihomecat[homecat];
            a += Ilearncat[learncat];
            a += Irenalcat[renalcat];

            /* The continuous coefficients */

            double cage_1 = 0.0535266800950749549459218;
            double cage_2 = -0.0200935878258154260178614;
            double cbmi_1 = -19.7435582245984164728724863;
            double cbmi_2 = 6.6648702078668167203545636;
            double ctown = 0.0787269477751315061020421;

            /* Sum from continuous values */

            a += age_1 * cage_1;
            a += age_2 * cage_2;
            a += bmi_1 * cbmi_1;
            a += bmi_2 * cbmi_2;
            a += town * ctown;

            /* The boolean coefficients */

            double cb2_82 = 0.0859851843797995313289917;
            double cb2_leukolaba = 0.2037201166969377086335413;
            double cb2_prednisolone = 0.6019896780418610982010819;
            double cb_AF = 0.1660328711606123830435422;
            double cb_CCF = 0.3158788199551698649969467;
            double cb_asthma = -0.1708080810500710866595142;
            double cb_bloodcancer = 0.4045790554089616630761839;
            double cb_cerebralpalsy = 1.2375891121070539124815468;
            double cb_chd = 0.2178442812641575854204490;
            double cb_cirrhosis = 0.6165061556893419725255967;
            double cb_congenheart = 0.2099695358513284648704911;
            double cb_copd = 0.4069036991923689616790227;
            double cb_dementia = 1.0673649341196249640262295;
            double cb_epilepsy = 0.4563898846837706191337247;
            double cb_fracture4 = 0.1142356737251236653563069;
            double cb_neurorare = 1.0103599800977995926132280;
            double cb_parkinsons = 0.1256622652011334939636811;
            double cb_pulmhyper = 0.4365766436191424459956067;
            double cb_pulmrare = -0.1665545651399719662144605;
            double cb_pvd = 0.3521144005866303494656222;
            double cb_ra_sle = 0.2775017265662046983543121;
            double cb_respcancer = 0.5288182839278391389470357;
            double cb_semi = 0.2549134429838964543968416;
            double cb_sicklecelldisease = 1.7818709562115360167666722;
            double cb_stroke = 0.2915465900033972213023503;
            double cb_type1 = 1.3918300744178950800744587;
            double cb_type2 = 1.8389652399973426266654997;
            double cb_vte = 0.1657707292848709101917848;
            double cp_marrow6 = 1.0220219382440418609547805;
            double cp_radio6 = 0.7446485607185400201757375;
            double cp_solidtransplant = 0.3787854828143376040294754;

            /* Sum from boolean values */

            a += b2_82 * cb2_82;
            a += b2_leukolaba * cb2_leukolaba;
            a += b2_prednisolone * cb2_prednisolone;
            a += b_AF * cb_AF;
            a += b_CCF * cb_CCF;
            a += b_asthma * cb_asthma;
            a += b_bloodcancer * cb_bloodcancer;
            a += b_cerebralpalsy * cb_cerebralpalsy;
            a += b_chd * cb_chd;
            a += b_cirrhosis * cb_cirrhosis;
            a += b_congenheart * cb_congenheart;
            a += b_copd * cb_copd;
            a += b_dementia * cb_dementia;
            a += b_epilepsy * cb_epilepsy;
            a += b_fracture4 * cb_fracture4;
            a += b_neurorare * cb_neurorare;
            a += b_parkinsons * cb_parkinsons;
            a += b_pulmhyper * cb_pulmhyper;
            a += b_pulmrare * cb_pulmrare;
            a += b_pvd * cb_pvd;
            a += b_ra_sle * cb_ra_sle;
            a += b_respcancer * cb_respcancer;
            a += b_semi * cb_semi;
            a += b_sicklecelldisease * cb_sicklecelldisease;
            a += b_stroke * cb_stroke;
            a += b_type1 * cb_type1;
            a += b_type2 * cb_type2;
            a += b_vte * cb_vte;
            a += p_marrow6 * cp_marrow6;
            a += p_radio6 * cp_radio6;
            a += p_solidtransplant * cp_solidtransplant;

            /* The interaction coefficients */

            double cage_1_b_type2 = -0.0200621605517602719093162;
            double cage_2_b_type2 = 0.0074957790032429043661222;

            /* Sum from interaction terms */

            a += age_1 * b_type2 * cage_1_b_type2;
            a += age_2 * b_type2 * cage_2_b_type2;

            /* Calculate the score itself */
            double score = 100.0 * (1 - Math.Pow(survivor[surv], Math.Exp(a)));
            return score;
        }

        public Result status3_female(
            int age, bool b2_82, bool b2_leukolaba, bool b2_prednisolone, bool b_AF, bool b_CCF, bool b_asthma, bool b_bloodcancer, bool b_cerebralpalsy, bool b_chd, bool b_cirrhosis, bool b_congenheart, bool b_copd, bool b_dementia, bool b_epilepsy, bool b_fracture4, bool b_neurorare, bool b_parkinsons, bool b_pulmhyper, bool b_pulmrare, bool b_pvd, bool b_ra_sle, bool b_respcancer, bool b_semi, bool b_sicklecelldisease, bool b_stroke, DiabetesCat diabetes_cat, bool b_vte, double bmi, Chemocat chemocat, Ethnicity ethnicity, Homecat homecat, Learncat learncat, bool p_marrow6, bool p_radio6, bool p_solidtransplant, Renalcat renalcat, int surv, double town
        )
        {
            Result result = new Result();
            bool validInputs = validateIntsAndDoubles(ref age, b2_82, b2_leukolaba, b2_prednisolone, b_AF, b_CCF, b_asthma, b_bloodcancer, b_cerebralpalsy, b_chd, b_cirrhosis, b_congenheart, b_copd, b_dementia, b_epilepsy, b_fracture4, b_neurorare, b_parkinsons, b_pulmhyper, b_pulmrare, b_pvd, b_ra_sle, b_respcancer, b_semi, b_sicklecelldisease, b_stroke, diabetes_cat, b_vte, ref bmi, chemocat, ethnicity, homecat, learncat, p_marrow6, p_radio6, p_solidtransplant, renalcat, ref surv, ref town);
            if (validInputs)
            {
                result.status = "ok";
                if (estimate)
                {
                    result.status = "estimate:";
                    foreach (Object obj in estimateList)
                    {
                        string s = (string)obj;
                        s = s.Replace(",", " to ");
                        result.status += s + ";";
                    }
                }
            }
            else
            {
                result.status = "error:";
                foreach (Object obj in errorList)
                {
                    string s = (string)obj;
                    s = s.Replace(",", " to ");
                    result.status += s + ";";
                }
                result.score = null;
                return result;
            }

            double tmp = status3_female_raw(
                age,    // age must lie in range (19 .. 100)
                Utilities.boolToInt(b2_82),
                Utilities.boolToInt(b2_leukolaba),
                Utilities.boolToInt(b2_prednisolone),
                Utilities.boolToInt(b_AF),
                Utilities.boolToInt(b_CCF),
                Utilities.boolToInt(b_asthma),
                Utilities.boolToInt(b_bloodcancer),
                Utilities.boolToInt(b_cerebralpalsy),
                Utilities.boolToInt(b_chd),
                Utilities.boolToInt(b_cirrhosis),
                Utilities.boolToInt(b_congenheart),
                Utilities.boolToInt(b_copd),
                Utilities.boolToInt(b_dementia),
                Utilities.boolToInt(b_epilepsy),
                Utilities.boolToInt(b_fracture4),
                Utilities.boolToInt(b_neurorare),
                Utilities.boolToInt(b_parkinsons),
                Utilities.boolToInt(b_pulmhyper),
                Utilities.boolToInt(b_pulmrare),
                Utilities.boolToInt(b_pvd),
                Utilities.boolToInt(b_ra_sle),
                Utilities.boolToInt(b_respcancer),
                Utilities.boolToInt(b_semi),
                Utilities.boolToInt(b_sicklecelldisease),
                Utilities.boolToInt(b_stroke),
                Utilities.diabetescatToType1(diabetes_cat),
                Utilities.diabetescatToType2(diabetes_cat),
                Utilities.boolToInt(b_vte),
                bmi,    // bmi must lie in range (15 .. 47)
                Utilities.chemocatToInt(chemocat),
                Utilities.ethnicityToEthrisk(ethnicity),
                Utilities.homecatToInt(homecat),
                Utilities.learncatToInt(learncat),
                Utilities.boolToInt(p_marrow6),
                Utilities.boolToInt(p_radio6),
                Utilities.boolToInt(p_solidtransplant),
                Utilities.renalcatToInt(renalcat),
                surv,   // surv must lie in range (1 .. 90)
                town    // town must lie in range (-8 .. 12)
            );
            tmp = Math.Round(tmp * 1000000.0) / 1000000.0;
            result.score = tmp;

            return result;
        }

        /* End of status3 */

    }
}
