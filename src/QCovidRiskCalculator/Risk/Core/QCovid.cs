// QCovid® Calculation Engine is Copyright © 2020 Oxford University Innovation Limited.
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
// 
// PLEASE NOTE:
// In its compiled form, QCovid@ Calculation Engine is a Class I Medical Device and
// is covered by the Medical Device Regulations 2002 (as amended).
// 
// Modification of the source code and subsequently placing that modified code on the market
// may make that person/entity a legal manufacturer of a medical device and so
// subject to the requirements listed in Medical Device Regulations 2002 (as amended).
// 
// Failure to comply with these regulations (for example, failure to comply with the relevant
// registration requirements or failure to meet the relevant essential requirements)
// may result in prosecution and a penalty of an unlimited fine and/or 6 months’ imprisonment.
// 
// This source code version of QCovid® Calculation Engine is provided as is, and
// has not been certified for clinical use, and must not be used for supporting or informing clinical decision-making.

using System;

using CRStandardDefinitions;
using ClinRiskAutogenerated;

namespace Ox.QCovid
{
    internal class QCovid
    {
        public class Result
        {
            public string status;
            public Double? death_patient_score;
            public Double? death_typical_score;
            public int? death_patient_centile;
            public int? death_typical_centile;
            public Double? hospital_patient_score;
            public Double? hospital_typical_score;
            public int? hospital_patient_centile;
            public int? hospital_typical_centile;

            public Result()
            {
                status = "undefined";
                death_patient_score = null;
                death_typical_score = null;
                death_patient_centile = null;
                death_typical_centile = null;
            }
        }

        public Result calculate(Gender sex, int age, bool b2_82, bool b2_leukolaba, bool b2_prednisolone, bool b_AF, bool b_CCF, bool b_asthma, bool b_bloodcancer, bool b_cerebralpalsy, bool b_chd, bool b_cirrhosis, bool b_congenheart, bool b_copd, bool b_dementia, bool b_epilepsy, bool b_fracture4, bool b_neurorare, bool b_parkinsons, bool b_pulmhyper, bool b_pulmrare, bool b_pvd, bool b_ra_sle, bool b_respcancer, bool b_semi, bool b_sicklecelldisease, bool b_stroke, DiabetesCat diabetes_cat, bool b_vte, double bmi, Chemocat chemocat, Ethnicity ethnicity, Homecat homecat, Learncat learncat, bool p_marrow6, bool p_radio6, bool p_solidtransplant, Renalcat renalcat, double town)
        {
            int surv = 90;
            Result result = new Result();
            if (sex == Gender.Female)
            {
                // scores from model 3_20_0 and 6_20_0
                OX100_status3_20_0 qcovid_female_death = new OX100_status3_20_0();
                OX100_status3_20_0.Result rd = qcovid_female_death.status3_female(age, b2_82, b2_leukolaba, b2_prednisolone, b_AF, b_CCF, b_asthma, b_bloodcancer, b_cerebralpalsy, b_chd, b_cirrhosis, b_congenheart, b_copd, b_dementia, b_epilepsy, b_fracture4, b_neurorare, b_parkinsons, b_pulmhyper, b_pulmrare, b_pvd, b_ra_sle, b_respcancer, b_semi, b_sicklecelldisease, b_stroke, diabetes_cat, b_vte, bmi, chemocat, ethnicity, homecat, learncat, p_marrow6, p_radio6, p_solidtransplant, renalcat, surv, town);
                result.status = rd.status;
                result.death_patient_score = rd.score;
                rd = qcovid_female_death.status3_female(age, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, DiabetesCat.None, false, 25.0, Chemocat.No_chemotherapy_in_the_last_12_months, Ethnicity.British, Homecat.Neither_in_a_nursing_or_care_home_nor_homeless, Learncat.Neither, false, false, false, Renalcat.No_CKD, 90, 0.0); ;
                result.death_typical_score = rd.score;

                OX100_status6_20_0 qcovid_female_hospital = new OX100_status6_20_0();
                OX100_status6_20_0.Result rh = qcovid_female_hospital.status6_female(age, b2_82, b2_leukolaba, b2_prednisolone, b_AF, b_CCF, b_asthma, b_bloodcancer, b_cerebralpalsy, b_chd, b_cirrhosis, b_congenheart, b_copd, b_dementia, b_epilepsy, b_fracture4, b_neurorare, b_parkinsons, b_pulmhyper, b_pulmrare, b_pvd, b_ra_sle, b_respcancer, b_semi, b_sicklecelldisease, b_stroke, diabetes_cat, b_vte, bmi, chemocat, ethnicity, homecat, learncat, p_marrow6, p_radio6, p_solidtransplant, renalcat, surv, town);
                result.hospital_patient_score = rh.score;
                rh = qcovid_female_hospital.status6_female(age, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, DiabetesCat.None, false, 25.0, Chemocat.No_chemotherapy_in_the_last_12_months, Ethnicity.British, Homecat.Neither_in_a_nursing_or_care_home_nor_homeless, Learncat.Neither, false, false, false, Renalcat.No_CKD, 90, 0.0); ;
                result.hospital_typical_score = rh.score;
            }
            else
            {
                // scores from model 3_20_1 and 6_20_1
                OX100_status3_20_1 qcovid_male_death = new OX100_status3_20_1();
                OX100_status3_20_1.Result rd = qcovid_male_death.status3_male(age, b2_82, b2_leukolaba, b2_prednisolone, b_AF, b_CCF, b_asthma, b_bloodcancer, b_cerebralpalsy, b_chd, b_cirrhosis, b_congenheart, b_copd, b_dementia, b_epilepsy, b_fracture4, b_neurorare, b_parkinsons, b_pulmhyper, b_pulmrare, b_pvd, b_ra_sle, b_respcancer, b_semi, b_sicklecelldisease, b_stroke, diabetes_cat, b_vte, bmi, chemocat, ethnicity, homecat, learncat, p_marrow6, p_radio6, p_solidtransplant, renalcat, surv, town);
                result.status = rd.status;
                result.death_patient_score = rd.score;
                rd = qcovid_male_death.status3_male(age, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, DiabetesCat.None, false, 25.0, Chemocat.No_chemotherapy_in_the_last_12_months, Ethnicity.British, Homecat.Neither_in_a_nursing_or_care_home_nor_homeless, Learncat.Neither, false, false, false, Renalcat.No_CKD, 90, 0.0); ;
                result.death_typical_score = rd.score;

                OX100_status6_20_1 qcovid_male_hospital = new OX100_status6_20_1();
                OX100_status6_20_1.Result rh = qcovid_male_hospital.status6_male(age, b2_82, b2_leukolaba, b2_prednisolone, b_AF, b_CCF, b_asthma, b_bloodcancer, b_cerebralpalsy, b_chd, b_cirrhosis, b_congenheart, b_copd, b_dementia, b_epilepsy, b_fracture4, b_neurorare, b_parkinsons, b_pulmhyper, b_pulmrare, b_pvd, b_ra_sle, b_respcancer, b_semi, b_sicklecelldisease, b_stroke, diabetes_cat, b_vte, bmi, chemocat, ethnicity, homecat, learncat, p_marrow6, p_radio6, p_solidtransplant, renalcat, surv, town);
                result.hospital_patient_score = rh.score;
                rh = qcovid_male_hospital.status6_male(age, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, DiabetesCat.None, false, 25.0, Chemocat.No_chemotherapy_in_the_last_12_months, Ethnicity.British, Homecat.Neither_in_a_nursing_or_care_home_nor_homeless, Learncat.Neither, false, false, false, Renalcat.No_CKD, 90, 0.0); ;
                result.hospital_typical_score = rh.score;
            }

            // centiles (for both sexes)
            if (result.death_patient_score.HasValue)
            {
                result.death_patient_centile = Centiles.get_death_centile(result.death_patient_score.Value);
                result.death_typical_centile = Centiles.get_death_centile(result.death_typical_score.Value);
            }
            if (result.hospital_patient_score.HasValue)
            {
                result.hospital_patient_centile = Centiles.get_hospital_centile(result.hospital_patient_score.Value);
                result.hospital_typical_centile = Centiles.get_hospital_centile(result.hospital_typical_score.Value);
            }

            return result;
        }
    }
}
